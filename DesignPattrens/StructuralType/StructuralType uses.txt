كيفية اختيار التصميم المناسب:
استخدم Adapter عندما تحتاج إلى استخدام فئة موجودة ولكن بواجهة مختلفة.
استخدم Bridge عندما تحتاج إلى فصل الواجهة عن التنفيذ للسماح بالتطوير المستقل لكل منهما.
استخدم Decorator عندما تحتاج إلى إضافة وظائف إضافية إلى كائنات بشكل ديناميكي.
استخدم Facade عندما تحتاج إلى توفير واجهة مبسطة للتفاعل مع نظام معقد.
استخدم Proxy عندما تحتاج إلى توفير كائن يتحكم في الوصول إلى كائن آخر.

Adapter :
Adapter is a structural design pattern that allows objects 
with incompatible interfaces to collaborate.
المحول هو نمط تصميم هيكلي يسمح للكائنات ذات الواجهات غير المتوافقة بالتعاون.

An adapter wraps one of the objects to hide the complexity of conversion happening 
behind the scenes.
يقوم المحول بتغليف أحد الكائنات لإخفاء
تعقيد التحويل الذي يحدث خلف الكواليس. الكائن الملتف ليس على علم بالمحول.
For example, you can wrap an object that operates in meters and kilometers with an 
adapter that converts all of the data to imperial units such as feet and miles.
على سبيل المثال، يمكنك تغليف كائن يعمل بالمتر والكيلومترات
باستخدام محول يحول كافة البيانات إلى وحدات إمبراطورية مثل القدم والأميال.

also:
Adapter is a structural design pattern, which allows (incompatible) objects to collaborate.

The Adapter acts as a wrapper between two objects. It catches calls for one object and 
transforms them to format and interface recognizable by the second object.
المحول هو نمط تصميم هيكلي يسمح للكائنات غير المتوافقة بالتعاون.

يعمل المحول بمثابة غلاف بين كائنين. فهو يلتقط 
المكالمات لكائن واحد ويحولها إلى تنسيق وواجهة يمكن التعرف عليها بواسطة الكائن الثاني.

This implementation uses the object composition principle: the adapter implements the 
interface of one object and wraps the other one.
يستخدم هذا التنفيذ 
مبدأ تكوين الكائن: يقوم المحول بتنفيذ واجهة أحد الكائنات وتغليف الكائن الآخر.




//     Adapter class  
// +----------------------------+
// |    SlackNotification       |
// |----------------------------|
// | - slack: SlackApi          |
// | - chatId: string           |
// |----------------------------|
// | + SlackNotification(SlackApi, string) |
// | + send(string, string): void |
// +----------------------------+
//             ^
//             |
//             | implements
//             v
// +----------------------+  
// |    Notification      |     
// |----------------------|                
// | + send(string, string): void |
// +----------------------+
//            ^
//            |
//            | implements
//            v
// +----------------------------+
// |    EmailNotification       |
// |----------------------------|
// | - adminEmail: string       |
// |----------------------------|
// | + EmailNotification(string)|
// | + send(string, string): void |
// +----------------------------+

// +----------------------+
// |       SlackApi       |
// |----------------------|
// | - login: string      |
// | - apiKey: string     |
// |----------------------|
// | + SlackApi(string, string) |
// | + logIn(): void           |
// | + sendMessage(string, string): void |
// +----------------------+


Bridge:
تصميم Bridge هو أحد الأنماط الهيكلية (Structural Design Patterns) والذي يُستخدم لفصل واجهة 
الكلاس عن التنفيذ الخاص 
بها بحيث يمكن لكلاهما 
أن يتغيرا بشكل مستقل. الهدف من هذا النمط هو معالجة 
التعقيد وتجنب التكرار عند وجود فئات متداخلة ومتعددة 
المستويات.

متى يتم استخدامه؟

عندما تريد فصل الواجهة عن التنفيذ للسماح بتطوير كلاهما بشكل مستقل.
عندما يكون لديك فئات متعددة ومستويات متعددة من التوريث.
عندما تريد تغيير أو توسيع أجزاء من النظام بشكل مستقل دون التأثير على الأجزاء الأخرى.
مكونات تصميم Bridge
Abstraction (التجريد): تحتوي على واجهة العميل وتحمل إشارة إلى الكائن Implementor.
Refined Abstraction (التجريد المحسن): تمدد Abstraction وتضيف وظائف إضافية.
Implementor (المنفذ): واجهة تحدد عمليات بسيطة وليست كاملة.
Concrete Implementor (المنفذ الملموس): ينفذ واجهة Implementor.

مثال
تخيل أنك تبني نظامًا للرسم 
يمكنه رسم 
الأشكال باستخدام عدة واجهات رسومية (مثل OpenGL وDirectX). يمكنك استخدام تصميم 
Bridge للفصل بين واجهة الأشكال وطريقة 
رسمها.


Decorator:

نمط Decorator هو أحد أنماط التصميم الهيكلية (Structural Design Patterns) الذي يسمح لك بإضافة سلوكيات 
أو وظائف جديدة للكائنات بشكل ديناميكي دون تغيير الشيفرة 
الأصلية للكائنات. يعتمد هذا النمط على تغليف الكائنات في "غلافات" (Wrappers) تضيف السلوكيات الجديدة..

متى نستخدم نمط Decorator:
عندما نريد إضافة وظائف أو سلوكيات جديدة لكائنات في النظام دون تعديل الشيفرة الأصلية.
عندما نريد تجنب وراثة فئات فرعية متعددة لإضافة وظائف مختلفة، مما يجعل الشيفرة أقل تعقيدًا.
عندما نحتاج إلى إضافة وظائف بشكل ديناميكي أثناء تشغيل البرنامج.

مثال على نمط Decorator:
لنفترض أن لدينا كائن Coffee نريد إضافة مكونات إضافية له (مثل الحليب، السكر، الشوكولاتة، إلخ) دون 
تعديل الشيفرة الأصلية لفئة Coffee.

Expample Expline:
Wearing clothes is an example of using decorators. When you’re cold, you wrap yourself in a 
sweater. If you’re still cold with a sweater, you can wear a jacket on top. If it’s raining, you can put on a raincoat. 
All of these garments “extend” your basic behavior but aren’t part of you, and you can easily take off any piece of 
clothing whenever you don’t need it.
يعد ارتداء الملابس مثالاً على استخدام مصممي الديكور. 
عندما تشعر بالبرد، تلف نفسك بسترة. إذا كنت لا تزال تشعر بالبرد 
وأنت ترتدي سترة، يمكنك ارتداء سترة فوقها. إذا كانت السماء 
تمطر، يمكنك ارتداء معطف واق من المطر. كل هذه الملابس تعمل على "توسيع" سلوكك الأساسي ولكنها ليست جزءًا 
منك، ويمكنك بسهولة خلع أي قطعة من الملابس عندما 
لا تحتاج 
إليها.

Facade :
Facade Pattern هو نمط تصميم هيكلي يوفر واجهة مبسطة (واجهة سهلة الاستخدام) 
لمجموعة معقدة من الواجهات في نظام فرعي. يوفر الـ Facade واجهة واحدة عالية المستوى تجعل 
النظام الفرعي 
أسهل للاستخدام.

متى نستخدم Facade Pattern؟
عندما تريد تبسيط واجهة معقدة لنظام فرعي.
عندما ترغب في تقليل عدد التبعيات بين النظام الفرعي والعملاء.
عندما ترغب في جعل النظام الفرعي أكثر سهولة للفهم والاستخدام.
عند الحاجة إلى توفير نقطة دخول موحدة لمجموعة من الوظائف المتناثرة في أجزاء مختلفة من النظام.

مثال
لنأخذ مثالاً لنظام 
إدارة الفيديوهات 
على 
الإنترنت، حيث لدينا عدة مكونات معقدة مثل التحقق من المستخدم، تحميل الفيديو، تحويل الفيديو 
إلى صيغ مختلفة، 
وتقديم الفيديو إلى المستخدم. يمكننا استخدام Facade لتبسيط التفاعل مع هذا النظام المعقد.

Important:
يعد وجود واجهة مفيدًا عندما تحتاج إلى دمج تطبيقك مع مكتبة متطورة تحتوي
 على العشرات من الميزات، ولكنك تحتاج فقط إلى القليل من وظائفها.