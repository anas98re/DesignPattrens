
Important Steps : 
- in Adapter class we put in constructor (the uncompatible class )
- in adapter class we override the function that exists in in service interface



Imagine that you’re creating a stock market monitoring app. The app downloads the 
stock data from multiple sources in XML format and then displays nice-looking charts 
and diagrams for the user.
At some point, you decide to improve the app by integrating a smart 3rd-party 
analytics library. But there’s a catch: the analytics library only works with 
data in JSON format.
You could change the library to work with XML. However, this might break some 
existing code that relies on the library. And worse, you might not have access to 
the library’s source code in the first place, making this approach impossible.

Solution
You can create an adapter. This is a special object that converts the interface 
of one object so that another object can understand it.

An adapter wraps one of the objects to hide the complexity of conversion happening 
behind the scenes. The wrapped object isn’t even aware of the adapter. For example, 
you can wrap an object that operates in meters and kilometers with an adapter that 
converts all of the data to imperial units such as feet and miles.

Adapters can not only convert data into various formats but can also help objects 
with different interfaces collaborate. Here’s how it works:

1-The adapter gets an interface, compatible with one of the existing objects.
2-Using this interface, the existing object can safely call the adapter’s methods.
3-Upon receiving a call, the adapter passes the request to the second object, but in a 
format and order that the second object expects.
Sometimes it’s even possible to create a two-way adapter that can convert the calls in 
both directions.

تخيل أنك تقوم بإنشاء تطبيق لمراقبة سوق الأوراق المالية. يقوم التطبيق بتنزيل بيانات المخزون من مصادر متعددة بتنسيق XML ثم يعرض مخططات ورسوم بيانية جميلة المظهر للمستخدم.
في مرحلة ما، تقرر تحسين التطبيق من خلال دمج مكتبة تحليلات ذكية تابعة لجهات خارجية. ولكن هناك مشكلة: مكتبة التحليلات تعمل فقط مع البيانات بتنسيق JSON.
يمكنك تغيير المكتبة للعمل مع XML. ومع ذلك، قد يؤدي هذا إلى كسر بعض التعليمات البرمجية الموجودة التي تعتمد على المكتبة. والأسوأ من ذلك أنك قد لا تتمكن من الوصول إلى الكود المصدري للمكتبة في المقام الأول، مما يجعل هذا النهج مستحيلًا.

 حل
يمكنك إنشاء محول. هذا كائن خاص يحول واجهة كائن واحد حتى يتمكن كائن آخر من فهمه.

يقوم المحول بتغليف أحد الكائنات لإخفاء تعقيد التحويل الذي يحدث خلف الكواليس. الكائن الملتف ليس على علم بالمحول. على سبيل المثال، يمكنك تغليف كائن يعمل بالمتر والكيلومترات باستخدام محول يحول كافة البيانات إلى وحدات إمبراطورية مثل القدم والأميال.

لا تستطيع المحولات تحويل البيانات إلى تنسيقات مختلفة فحسب، بل يمكنها أيضًا مساعدة الكائنات ذات الواجهات المختلفة على التعاون. وإليك كيف يعمل:

1-يحصل المحول على واجهة متوافقة مع أحد الكائنات الموجودة.
2-باستخدام هذه الواجهة، يمكن للكائن الموجود استدعاء أساليب المحول بأمان.
3- عند استقبال مكالمة، يقوم المحول بتمرير الطلب إلى الكائن الثاني، ولكن بالتنسيق والترتيب الذي يتوقعه الكائن الثاني.
في بعض الأحيان يكون من الممكن إنشاء محول ثنائي الاتجاه يمكنه تحويل المكالمات في كلا الاتجاهين.

