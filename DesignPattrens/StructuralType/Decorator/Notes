Important Steps:
- adding services to the basic services
- these services should Add as private methods in the Decorator that extends from the abstruct Decorator, and the methoda Overrides uses them..


Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors..
إن Decorator هو نمط تصميم هيكلي يتيح لك إرفاق سلوكيات جديدة بالكائنات عن طريق وضع هذه الكائنات داخل كائنات مجمعة خاصة تحتوي على السلوكيات.

Imagine that you’re working on a notification library which lets other programs notify their users about important events.

The initial version of the library was based on the Notifier class that had only a few fields, a constructor and a single send method. The method could accept a message argument from a client and send the message to a list of emails that were passed to the notifier via its constructor. A third-party app which acted as a client was supposed to create and configure the notifier object once, and then use it each time something important happened.

At some point, you realize that users of the library expect more than just email notifications. Many of them would like to receive an SMS about critical issues. Others would like to be notified on Facebook and, of course, the corporate users would love to get Slack notifications.

How hard can that be? You extended the Notifier class and put the additional notification methods into new subclasses. Now the client was supposed to instantiate the desired notification class and use it for all further notifications.

But then someone reasonably asked you, “Why can’t you use several notification types at once? If your house is on fire, you’d probably want to be informed through every channel.”

You tried to address that problem by creating special subclasses which combined several notification methods within one class. However, it quickly became apparent that this approach would bloat the code immensely, not only the library code but the client code as well.

You have to find some other way to structure notifications classes so that their number won’t accidentally break some Guinness record.
تخيل أنك تعمل على مكتبة إشعارات تتيح للبرامج الأخرى إخطار مستخدميها بالأحداث المهمة.

اعتمد الإصدار الأولي من المكتبة على فئة Notifier التي تحتوي على عدد قليل من الحقول ومنشئ وطريقة إرسال واحدة. يمكن أن تقبل الطريقة وسيطة رسالة من العميل وترسل الرسالة إلى قائمة رسائل البريد الإلكتروني التي تم تمريرها إلى المخطر عبر مُنشئها. كان من المفترض أن يقوم تطبيق تابع لجهة خارجية يعمل كعميل بإنشاء كائن التنبيه وتكوينه مرة واحدة، ثم استخدامه في كل مرة يحدث فيها شيء مهم.

في مرحلة ما، ستدرك أن مستخدمي المكتبة يتوقعون أكثر من مجرد إشعارات البريد الإلكتروني. يرغب الكثير منهم في تلقي رسالة نصية قصيرة حول المشكلات الحرجة. يرغب الآخرون في أن يتم إعلامهم على Facebook، وبالطبع، يرغب مستخدمو الشركات في الحصول على إشعارات Slack.

مدى صعوبة يمكن أن يكون؟ لقد قمت بتوسيع فئة Notifier ووضع طرق الإعلام الإضافية في فئات فرعية جديدة. الآن كان من المفترض أن يقوم العميل بإنشاء مثيل لفئة الإشعارات المطلوبة واستخدامها لجميع الإشعارات الإضافية.

ولكن بعد ذلك سألك أحد الأشخاص بشكل معقول: "لماذا لا يمكنك استخدام عدة أنواع من الإشعارات في وقت واحد؟ إذا اشتعلت النيران في منزلك، فربما تريد أن يتم إعلامك بذلك من خلال كل قناة."

لقد حاولت معالجة هذه المشكلة عن طريق إنشاء فئات فرعية خاصة تجمع بين عدة طرق إعلام داخل فئة واحدة. ومع ذلك، سرعان ما أصبح واضحًا أن هذا النهج من شأنه أن يؤدي إلى تضخم الكود بشكل كبير، ليس فقط كود المكتبة ولكن كود العميل أيضًا.

عليك أن تجد طريقة أخرى لتنظيم فئات الإشعارات حتى لا يحطم رقمها بعض الأرقام القياسية في موسوعة غينيس عن طريق الخطأ.

Solution
Extending a class is the first thing that comes to mind when you need to alter an object’s behavior. However, inheritance has several serious caveats that you need to be aware of.

Inheritance is static. You can’t alter the behavior of an existing object at runtime. You can only replace the whole object with another one that’s created from a different subclass.
Subclasses can have just one parent class. In most languages, inheritance doesn’t let a class inherit behaviors of multiple classes at the same time.
One of the ways to overcome these caveats is by using Aggregation or Composition  instead of Inheritance. Both of the alternatives work almost the same way: one object has a reference to another and delegates it some work, whereas with inheritance, the object itself is able to do that work, inheriting the behavior from its superclass.

With this new approach you can easily substitute the linked “helper” object with another, changing the behavior of the container at runtime. An object can use the behavior of various classes, having references to multiple objects and delegating them all kinds of work. Aggregation/composition is the key principle behind many design patterns, including Decorator. On that note, let’s return to the pattern discussion.
حل
إن توسيع الفصل هو أول ما يتبادر إلى ذهنك عندما تحتاج إلى تغيير سلوك كائن ما. ومع ذلك، فإن الميراث لديه العديد من المحاذير الخطيرة التي يجب أن تكون على دراية بها.

الميراث ثابت. لا يمكنك تغيير سلوك كائن موجود في وقت التشغيل. يمكنك فقط استبدال الكائن بأكمله بكائن آخر تم إنشاؤه من فئة فرعية مختلفة.
يمكن أن تحتوي الفئات الفرعية على فئة رئيسية واحدة فقط. في معظم اللغات، لا يسمح الوراثة للفصل بوراثة سلوكيات فئات متعددة في نفس الوقت.
إحدى الطرق للتغلب على هذه التحذيرات هي استخدام التجميع أو التركيب بدلاً من الوراثة. يعمل كلا البديلين بنفس الطريقة تقريبًا: يحتوي أحد الكائنات على إشارة إلى كائن آخر ويفوضه بعض العمل، بينما في حالة الميراث، يكون الكائن نفسه قادرًا على القيام بهذا العمل، ويرث السلوك من فئته الفائقة.

باستخدام هذا الأسلوب الجديد، يمكنك بسهولة استبدال الكائن "المساعد" المرتبط بكائن آخر، مما يؤدي إلى تغيير سلوك الحاوية في وقت التشغيل. يمكن للكائن استخدام سلوك فئات مختلفة، مع وجود إشارات إلى كائنات متعددة وتفويض جميع أنواع العمل إليها. التجميع/التركيب هو المبدأ الأساسي وراء العديد من أنماط التصميم، بما في ذلك Decorator. في هذه الأثناء، دعونا نعود إلى مناقشة النمط.


“Wrapper” is the alternative nickname for the Decorator pattern that clearly expresses the main idea of the pattern. A wrapper is an object that can be linked with some target object. The wrapper contains the same set of methods as the target and delegates to it all requests it receives. However, the wrapper may alter the result by doing something either before or after it passes the request to the target.

When does a simple wrapper become the real decorator? As I mentioned, the wrapper implements the same interface as the wrapped object. That’s why from the client’s perspective these objects are identical. Make the wrapper’s reference field accept any object that follows that interface. This will let you cover an object in multiple wrappers, adding the combined behavior of all the wrappers to it.

In our notifications example, let’s leave the simple email notification behavior inside the base Notifier class, but turn all other notification methods into decorators.
"المغلف" هو الاسم المستعار البديل لنمط الديكور الذي يعبر بوضوح عن الفكرة الرئيسية للنمط. المجمع هو كائن يمكن ربطه ببعض الكائنات المستهدفة. يحتوي المجمع على نفس مجموعة الأساليب التي يحتوي عليها الهدف ويفوض إليه جميع الطلبات التي يتلقاها. ومع ذلك، قد يغير المجمّع النتيجة عن طريق القيام بشيء ما قبل أو بعد تمرير الطلب إلى الهدف.

متى يصبح الغلاف البسيط هو الديكور الحقيقي؟ كما ذكرت، ينفذ المجمّع نفس واجهة الكائن الملتف. ولهذا السبب فإن هذه الأشياء متطابقة من وجهة نظر العميل. اجعل الحقل المرجعي للمجمّع يقبل أي كائن يتبع تلك الواجهة. سيتيح لك ذلك تغطية كائن بأغلفة متعددة، وإضافة السلوك المدمج لجميع الأغلفة إليه.

في مثال الإشعارات الخاص بنا، دعونا نترك سلوك إشعار البريد الإلكتروني البسيط داخل فئة Notifier الأساسية، ولكن نحول جميع طرق الإشعارات الأخرى إلى أدوات تزيين.