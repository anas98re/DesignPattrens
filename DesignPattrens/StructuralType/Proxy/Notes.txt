Important Steps:
- we have an interface to know the operation
- we have tow classes, the first (the real object) implements the operations
and the second (proxy) implements the operations but get them from cach or log.
- we put a condition n the proxy (if the log or cach empty or not)
- if empty we create the new object from the real object
- the client uses the proxy

Intent
Proxy is a structural design pattern that lets you provide a substitute or 
placeholder for another object. A proxy controls access to the original object, 
allowing you to perform something either before or after the request gets through 
to the original object.
نية
الوكيل هو نمط تصميم هيكلي يتيح لك توفير بديل أو عنصر نائب لكائن آخر.
يتحكم الوكيل في الوصول إلى الكائن الأصلي، 
مما يسمح لك بتنفيذ شيء ما قبل أو بعد وصول الطلب إلى الكائن الأصلي.

Problem
Why would you want to control access to an object? Here is an example: 
you have a massive object that consumes a vast amount of system resources. 
You need it from time to time, but not always.
مشكلة
لماذا تريد التحكم في الوصول إلى كائن ما؟ إليك مثال: لديك كائن 
ضخم يستهلك كمية هائلة من موارد النظام. تحتاجه من وقت لآخر، ولكن ليس دائمًا.
You could implement lazy initialization: create this object only when it’s actually 
needed. All of the object’s clients would need to execute some deferred initialization 
code. Unfortunately, this would probably cause a lot of code duplication.

In an ideal world, we’d want to put this code directly into our object’s class, 
but that isn’t always possible. For instance, the class may be part of a closed 
3rd-party library.
يمكنك تنفيذ التهيئة البطيئة: قم بإنشاء هذا 
الكائن فقط عند الحاجة إليه بالفعل. سيحتاج كافة عملاء الكائن 
إلى تنفيذ بعض تعليمات التهيئة المؤجلة. لسوء الحظ، من المحتمل 
أن يتسبب هذا في الكثير من تكرار التعليمات البرمجية.

في عالم مثالي، نرغب في وضع هذا الرمز مباشرةً في فئة الكائن، 
لكن هذا ليس ممكنًا دائمًا. على سبيل المثال، قد 
يكون الفصل الدراسي جزءًا من مكتبة مغلقة تابعة لجهة خارجية.


Solution
The Proxy pattern suggests that you create a new proxy class with the same 
interface as an original service object. Then you update your app so that it 
passes the proxy object to all of the original object’s clients. Upon receiving a 
request from a client, the proxy creates a real service object and delegates all 
the work to it.
حل
يقترح نمط الوكيل أن تقوم بإنشاء فئة وكيل جديدة بنفس واجهة 
كائن الخدمة الأصلي. ثم تقوم بتحديث تطبيقك بحيث يقوم بتمرير 
كائن الوكيل إلى جميع عملاء الكائن الأصلي. عند تلقي طلب من 
العميل، يقوم الوكيل بإنشاء كائن خدمة حقيقي ويفوض كل العمل إليه.

But what’s the benefit? If you need to execute something either before or 
after the primary logic of the class, the proxy lets you do this without 
changing that class. Since the proxy implements the same interface as the 
original class, it can be passed to any client that expects a real service object.
ولكن ما الفائدة؟ إذا كنت بحاجة إلى تنفيذ شيء ما قبل أو بعد المنطق الأساسي 
للفئة، فإن الوكيل يتيح لك القيام بذلك دون تغيير تلك الفئة. نظرًا لأن الوكيل 
يطبق نفس الواجهة مثل الفئة الأصلية، فيمكن تمريره إلى أي عميل يتوقع كائن خدمة حقيقي.

Ex :
A credit card is a proxy for a bank account, which is a proxy for a bundle of cash. 
Both implement the same interface: they can be used for making a payment. A consumer 
feels great because there’s no need to carry loads of cash around. A shop owner is also 
happy since the income from a transaction gets added electronically to the shop’s bank 
account without the risk of losing the deposit or getting robbed on the way to the bank.
بطاقة الائتمان هي وكيل لحساب مصرفي، وهو وكيل لحزمة من النقود. 
كلاهما يطبق نفس الواجهة: يمكن استخدامهما لإجراء الدفع. يشعر 
المستهلك بالارتياح لأنه ليس هناك حاجة لحمل كميات كبيرة من النقود. يكون صاحب 
المتجر سعيدًا أيضًا حيث يتم إضافة الدخل الناتج عن المعاملة إلكترونيًا إلى الحساب 
البنكي للمتجر دون التعرض لخطر فقدان الوديعة أو التعرض للسرقة في الطريق إلى البنك.

Ex:
This example illustrates how the Proxy pattern can help to introduce lazy initialization 
and caching to a 3rd-party YouTube integration library.

The library provides us with the video downloading class. However, it’s very inefficient. 
If the client application requests the same video multiple times, the library just downloads 
it over and over, instead of caching and reusing the first downloaded file.

The proxy class implements the same interface as the original downloader and delegates it 
all the work. However, it keeps track of the downloaded files and returns the cached result 
when the app requests the same video multiple times.
يوضح هذا المثال كيف يمكن أن 
يساعد نمط الوكيل في تقديم التهيئة البطيئة والتخزين المؤقت لمكتبة تكامل YouTube تابعة لجهة خارجية.

توفر لنا المكتبة فصل تنزيل الفيديو. ومع ذلك، فهي غير فعالة للغاية. إذا طلب تطبيق 
العميل نفس الفيديو عدة مرات، فستقوم المكتبة بتنزيله مرارًا وتكرارًا، 
بدلاً من تخزين الملف الذي تم تنزيله لأول مرة مؤقتًا وإعادة استخدامه.

تنفذ فئة الوكيل نفس الواجهة التي يستخدمها برنامج التنزيل 
الأصلي وتفوضها بكل العمل. ومع ذلك، فإنه يتتبع الملفات التي تم تنزيلها 
ويعيد النتيجة المخزنة مؤقتًا عندما يطلب التطبيق نفس الفيديو عدة مرات.



