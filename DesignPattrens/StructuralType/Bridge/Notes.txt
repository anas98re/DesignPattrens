
Important Steps : 
- in Adapter class we put in constructor (the uncompatible class )
- in adapter class we override the function that exists in in service interface


Bridge is a structural design pattern that lets you split a large class or a set 
of closely related classes into two separate hierarchies—abstraction and 
implementation—which can be developed independently of each other
Bridge هو نمط تصميم هيكلي يسمح لك بتقسيم فئة كبيرة 
أو مجموعة من الفئات ذات الصلة الوثيقة إلى تسلسلين هرميين منفصلين —
التجريد والتنفيذ — ويمكن تطويرهما بشكل مستقل عن بعضهما البعض

شرح :
تصميم Bridge هو أحد الأنماط الهيكلية (Structural Design Patterns)
والذي يُستخدم لفصل واجهة الكلاس عن التنفيذ الخاص بها
بحيث يمكن لكلاهما أن يتغيرا بشكل مستقل. الهدف من هذا النمط هو معالجة
التعقيد وتجنب التكرار عند وجود فئات متداخلة ومتعددة المستويات.

متى يتم استخدامه؟

عندما تريد فصل الواجهة عن التنفيذ للسماح بتطوير كلاهما بشكل مستقل.
عندما يكون لديك فئات متعددة ومستويات متعددة من التوريث.
عندما تريد تغيير أو توسيع أجزاء من النظام بشكل مستقل دون التأثير على الأجزاء الأخرى.
مكونات تصميم Bridge
Abstraction (التجريد): تحتوي على واجهة العميل وتحمل إشارة إلى الكائن Implementor.
Refined Abstraction (التجريد المحسن): تمدد Abstraction وتضيف وظائف إضافية.
Implementor (المنفذ): واجهة تحدد عمليات بسيطة وليست كاملة.
Concrete Implementor (المنفذ الملموس): ينفذ واجهة Implementor.

مثال
تخيل أنك تبني نظامًا للرسم يمكنه رسم الأشكال باستخدام عدة واجهات رسومية 
(مثل OpenGL وDirectX). يمكنك استخدام تصميم Bridge للفصل بين واجهة الأشكال وطريقة رسمها.

Problem :
Say you have a geometric Shape class with a pair of subclasses: Circle and Square. 
You want to extend this class hierarchy to incorporate colors, so you plan to 
create Red and Blue shape subclasses. However, since you already have two subclasses, 
you’ll need to create four class combinations such as BlueCircle and RedSquare.

Adding new shape types and colors to the hierarchy will grow it exponentially. For 
example, to add a triangle shape you’d need to introduce two subclasses, one for 
each color. And after that, adding a new color would require creating three subclasses, 
one for each shape type. The further we go, the worse it becomes.
لنفترض أن لديك فئة شكل هندسي تحتوي على زوج من 
الفئات الفرعية: الدائرة والمربع. أنت تريد توسيع هذا التسلسل الهرمي للفئة ليشمل 
الألوان، لذلك تخطط لإنشاء فئات فرعية للأشكال باللون الأحمر والأزرق. ومع ذلك، نظرًا 
لأن لديك بالفعل فئتين فرعيتين، فستحتاج إلى إنشاء أربع مجموعات من الفئات مثل BlueCircle
وRedSquare.

ستؤدي إضافة أنواع وألوان جديدة من الأشكال إلى 
التسلسل الهرمي إلى تنميته بشكل كبير. على سبيل المثال، لإضافة 
شكل مثلث، ستحتاج إلى تقديم فئتين فرعيتين، واحدة لكل لون. 
وبعد ذلك، فإن إضافة لون جديد يتطلب إنشاء ثلاث فئات فرعية، 
واحدة لكل نوع شكل. كلما ذهبنا أبعد، كلما أصبح الأمر أسوأ.

Solution :
This problem occurs because we’re trying to extend the shape classes in 
two independent dimensions: by form and by color. That’s a very common 
issue with class inheritance.

The Bridge pattern attempts to solve this problem by switching from 
inheritance to the object composition. What this means is that you extract 
one of the dimensions into a separate class hierarchy, so that the original 
classes will reference an object of the new hierarchy, instead of having all 
of its state and behaviors within one class.

تحدث هذه المشكلة لأننا نحاول توسيع فئات الأشكال في 
بعدين مستقلين: حسب الشكل وحسب اللون. هذه مشكلة شائعة جدًا في وراثة الفصل.

يحاول نمط الجسر حل هذه المشكلة عن طريق 
التبديل من الوراثة إلى تكوين الكائن. ما يعنيه هذا هو أنك تستخرج أحد 
الأبعاد في تسلسل هرمي منفصل للفئة، بحيث تشير الفئات الأصلية إلى كائن في 
التسلسل الهرمي الجديد، بدلاً من وجود كل حالته وسلوكياته داخل فئة واحدة.

Following this approach, we can extract the color-related code into its 
own class with two subclasses: Red and Blue. The Shape class then gets a 
reference field pointing to one of the color objects. Now the shape can 
delegate any color-related work to the linked color object. That reference 
will act as a bridge between the Shape and Color classes. From now on, adding 
new colors won’t require changing the shape hierarchy, and vice versa.
باتباع هذا النهج، يمكننا استخراج الكود 
المرتبط بالألوان في فئته الخاصة مع فئتين فرعيتين: الأحمر والأزرق.
تحصل فئة الشكل بعد ذلك على حقل مرجعي يشير إلى أحد كائنات الألوان. 
الآن يمكن للشكل تفويض أي عمل متعلق بالألوان إلى كائن اللون المرتبط. 
سيكون هذا المرجع بمثابة جسر بين فئتي الشكل واللون. من الآن فصاعدًا، 
لن تتطلب إضافة ألوان جديدة تغيير التسلسل الهرمي للأشكال، والعكس صحيح.

Abstraction and Implementation
The GoF book  introduces the terms Abstraction and Implementation as part of the 
Bridge definition. In my opinion, the terms sound too academic and make the pattern 
seem more complicated than it really is. Having read the simple example with shapes 
and colors, let’s decipher the meaning behind the GoF book’s scary words.

Abstraction (also called interface) is a high-level control layer for some entity. 
This layer isn’t supposed to do any real work on its own. It should delegate the work 
to the implementation layer (also called platform).

Note that we’re not talking about interfaces or abstract classes from your 
programming language. These aren’t the same things.

When talking about real applications, the abstraction can be represented by a 
graphical user interface (GUI), and the implementation could be the underlying 
operating system code (API) which the GUI layer calls in response to user interactions.

Generally speaking, you can extend such an app in two independent directions:

Have several different GUIs (for instance, tailored for regular customers or admins).
Support several different APIs (for example, to be able to launch the app under Windows, 
Linux, and macOS).
In a worst-case scenario, this app might look like a giant spaghetti bowl, where hundreds 
of conditionals connect different types of GUI with various APIs all over the code.
التجريد والتنفيذ
يقدم كتاب GoF مصطلحات التجريد والتنفيذ كجزء من تعريف 
الجسر. في رأيي، تبدو المصطلحات أكاديمية للغاية وتجعل النمط يبدو 
أكثر تعقيدًا مما هو عليه بالفعل. بعد قراءة المثال البسيط بالأشكال 
والألوان، دعونا نحلل المعنى الكامن وراء الكلمات المخيفة في كتاب GoF.

التجريد (وتسمى أيضًا الواجهة) هو طبقة تحكم عالية المستوى لبعض الكيانات. ليس من 
المفترض أن تقوم هذه الطبقة بأي عمل حقيقي 
بمفردها. يجب أن يفوض العمل إلى طبقة التنفيذ (وتسمى أيضًا النظام الأساسي).

لاحظ أننا لا نتحدث عن واجهات أو فئات مجردة من لغة البرمجة الخاصة بك. هذه ليست نفس الأشياء.

عند الحديث عن التطبيقات الحقيقية، 
يمكن تمثيل التجريد من خلال واجهة المستخدم الرسومية (GUI)، ويمكن أن يكون التنفيذ 
هو رمز نظام 
التشغيل
الأساسي (API) الذي تستدعيه طبقة واجهة المستخدم الرسومية استجابةً لتفاعلات المستخدم.

بشكل عام، يمكنك توسيع هذا التطبيق في اتجاهين مستقلين:

لديك العديد من واجهات المستخدم الرسومية المختلفة (على سبيل المثال، مصممة للعملاء 
أو المسؤولين العاديين).
دعم العديد من واجهات برمجة التطبيقات المختلفة (على سبيل المثال، لتتمكن من تشغيل 
التطبيق ضمن أنظمة التشغيل Windows وLinux وmacOS).
في أسوأ السيناريوهات، قد يبدو هذا التطبيق وكأنه 
وعاء معكرونة عملاق، حيث تربط مئات الشروط الشرطية أنواعًا مختلفة من واجهة 
المستخدم الرسومية مع واجهات برمجة التطبيقات المختلفة في جميع أنحاء الكود.

You can bring order to this chaos by extracting the code related to specific 
interface-platform combinations into separate classes. However, soon you’ll 
discover that there are lots of these classes. The class hierarchy will grow 
exponentially because adding a new GUI or supporting a different API would 
require creating more and more classes.

Let’s try to solve this issue with the Bridge pattern. It suggests that we 
divide the classes into two hierarchies:

Abstraction: the GUI layer of the app.
Implementation: the operating systems’ APIs.
يمكنك تنظيم هذه الفوضى عن طريق استخراج التعليمات 
البرمجية المتعلقة بمجموعات منصة واجهة محددة في فئات منفصلة. ومع 
ذلك، ستكتشف قريبًا أن هناك الكثير من هذه الفئات. سوف ينمو التسلسل 
الهرمي للفصل بشكل كبير لأن إضافة واجهة مستخدم رسومية جديدة أو دعم 
واجهة برمجة تطبيقات مختلفة سيتطلب إنشاء المزيد والمزيد من الفئات.

دعونا نحاول حل هذه المشكلة باستخدام نمط الجسر. يقترح أن نقسم الطبقات إلى تسلسلين هرميين:

التجريد: طبقة واجهة المستخدم الرسومية للتطبيق.
التنفيذ: واجهات برمجة التطبيقات لأنظمة التشغيل.


- 
The abstraction object controls the appearance of the app, delegating the 
actual work to the linked implementation object. Different implementations 
are interchangeable as long as they follow a common interface, enabling the 
same GUI to work under Windows and Linux.

As a result, you can change the GUI classes without touching the API-related 
classes. Moreover, adding support for another operating system only requires 
creating a subclass in the implementation hierarchy.

This example illustrates how the Bridge pattern can help divide the monolithic 
code of an app that manages devices and their remote controls. The Device classes 
act as the implementation, whereas the Remotes act as the abstraction.

The base remote control class declares a reference field that links it with a 
device object. All remotes work with the devices via the general device interface, 
which lets the same remote support multiple device types.

You can develop the remote control classes independently from the device classes. 
All that’s needed is to create a new remote subclass. For example, a basic remote 
control might only have two buttons, but you could extend it with additional features, 
such as an extra battery or a touchscreen.

The client code links the desired type of remote control with a specific device 
object via the remote’s constructor.
يتحكم كائن التجريد في مظهر التطبيق، ويفوض العمل الفعلي إلى كائن التنفيذ 
المرتبط. تكون التطبيقات المختلفة قابلة للتبديل طالما أنها تتبع واجهة 
مشتركة، مما يتيح لنفس واجهة المستخدم الرسومية العمل تحت نظامي التشغيل Windows وLinux.

ونتيجة لذلك، يمكنك تغيير فئات واجهة المستخدم الرسومية 
دون لمس الفئات المرتبطة بواجهة برمجة التطبيقات. علاوة على ذلك، فإن إضافة 
دعم لنظام تشغيل آخر يتطلب فقط إنشاء فئة فرعية في التسلسل الهرمي للتنفيذ.

يوضح هذا المثال كيف يمكن أن يساعد نمط Bridge في تقسيم التعليمات البرمجية 
المتجانسة لأحد التطبيقات 
التي تدير الأجهزة وأجهزة 
التحكم عن بعد الخاصة بها. 
تعمل فئات الأجهزة بمثابة 
التنفيذ، في حين تعمل أجهزة 
التحكم عن بعد بمثابة التجريد.

تعلن فئة التحكم عن بعد الأساسية عن حقل مرجعي يربطها بكائن الجهاز. 
تعمل جميع أجهزة التحكم عن بعد مع الأجهزة عبر واجهة الجهاز العامة، 
والتي تتيح لجهاز التحكم عن بعد نفسه دعم أنواع متعددة من الأجهزة.

يمكنك تطوير فئات التحكم عن بعد بشكل مستقل عن فئات الأجهزة. 
كل ما هو مطلوب هو إنشاء فئة فرعية بعيدة جديدة. على سبيل المثال، 
قد يحتوي جهاز التحكم عن بعد الأساسي على زرين فقط، ولكن يمكنك 
توسيعه بميزات إضافية، مثل بطارية إضافية أو شاشة تعمل باللمس.

يربط رمز العميل النوع المطلوب من 
جهاز التحكم عن بعد بكائن جهاز محدد عبر مُنشئ جهاز التحكم عن بعد.

-
Bridge is a structural design pattern that divides business logic or 
huge class into separate class hierarchies that can be developed independently.

One of these hierarchies (often called the Abstraction) will get a reference 
to an object of the second hierarchy (Implementation). The abstraction will be 
able to delegate some (sometimes, most) of its calls to the implementations object. 
Since all implementations will have a common interface, they’d be interchangeable 
inside the abstraction.

Usage examples: The Bridge pattern is especially useful when dealing with cross-platform 
apps, supporting multiple types of database servers or working with several API providers 
of a certain kind (for example, cloud platforms, social networks, etc.)

Identification: Bridge can be recognized by a clear distinction between some controlling 
entity and several different platforms that it relies on.
Bridge هو نمط تصميم هيكلي يقسم منطق 
الأعمال أو الطبقة الضخمة إلى تسلسلات هرمية منفصلة يمكن تطويرها بشكل مستقل.

سيحصل أحد هذه التسلسلات الهرمية (يُسمى غالبًا التجريد) على إشارة إلى كائن من 
التسلسل الهرمي الثاني (التنفيذ). سيكون التجريد قادرًا على تفويض بعض 
(أحيانًا معظم) استدعاءاته إلى كائن التنفيذ. نظرًا لأن جميع التطبيقات سيكون
لها واجهة مشتركة، فستكون قابلة للتبديل داخل التجريد.

أمثلة الاستخدام: يعد نمط Bridge مفيدًا بشكل خاص عند التعامل مع 
التطبيقات عبر الأنظمة الأساسية، 
أو دعم أنواع متعددة من خوادم قواعد 
البيانات أو العمل مع العديد من موفري 
واجهة برمجة التطبيقات من نوع معين (على سبيل المثال، الأنظمة الأساسية السحابية، والشبكات 
الاجتماعية، وما إلى ذلك).

التعريف: يمكن التعرف على Bridge من خلال التمييز الواضح بين بعض الكيانات 
المسيطرة والعديد من المنصات 
المختلفة التي يعتمد عليها.