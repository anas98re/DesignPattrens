1 - Builder :

The Builder Design Pattern is used when you need to construct a complex object,
which requires multiple steps and configurations. This pattern separates the 
construction process from the final representation, allowing the same construction
process to create different representations.


يتم استخدام نمط تصميم المنشئ عندما تحتاج إلى إنشاء كائن معقد،
الأمر الذي يتطلب خطوات وتكوينات متعددة. هذا النمط يفصل بين
عملية البناء من التمثيل النهائي، مما يسمح بنفس البناء
عملية لإنشاء تمثيلات مختلفة.


Example 1:
Lets assume we want to build a complex object like a car,
which has various components such as the engine, wheels, 
and body. We should be able to configure the car in different 
ways (e.g., sports car, economy car).

لنفترض أننا نريد بناء جسم معقد مثل السيارة،
والتي تحتوي على مكونات مختلفة مثل المحرك، والعجلات،
والجسم. يجب أن نكون قادرين على تكوين السيارة بشكل مختلف
طرق (على سبيل المثال، سيارة رياضية، سيارة اقتصادية).

Example 2:
Suppose we want to create a House object that contains several components such as walls, doors, windows, roof, and garage. Each home can have different specifications for these components.

افترض أننا نريد إنشاء كائن House يحتوي على عدة مكونات مثل walls, doors, windows, roof, و garage. يمكن أن يكون لكل منزل مواصفات مختلفة لهذه المكونات.

+-----------------+        +----------------+
|     Director    |        |   CarBuilder   |Interface
+-----------------+        +----------------+
| - builder       |<>------| + buildEngine()|
+-----------------+        | + buildWheels()|
                           | + buildBody()  |
                           | + getCar()     |
                           +----------------+
                                   /_\
                                    |
                                    |
                                    |
                +-------------------+-------------------+
                |                                       |
                |                                       |
                |                                       |
+--------------------------+        +--------------------------+
|     SportsCarBuilder     |        |    EconomyCarBuilder     |
+--------------------------+        +--------------------------+
| - car: Car               |        | - car: Car               |
+--------------------------+        +--------------------------+
| + buildEngine()          |        | + buildEngine()          |
| + buildWheels()          |        | + buildWheels()          |
| + buildBody()            |        | + buildBody()            |
| + getCar()               |        | + getCar()               |
+--------------------------+        +--------------------------+
          |                                    |
          |                                    |
          V                                    V 
+----------------+                       +----------------+
|      Car 1     |                       |    car 2       |
+----------------+                       +----------------+
| - engine       |                       |                |
| - wheels       |                       |                |
| - body         |                       |                |
| + setEngine()  |                       |                |
| + setWheels()  |                       |                |
| + setBody()    |                       |                |
| + toString()   |                       |                |
+----------------+                       +----------------+


2 - Factory method

Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.
أسلوب المصنع هو نمط تصميم إبداعي يوفر واجهة لإنشاء كائنات في فئة فائقة، ولكنه يسمح للفئات الفرعية بتغيير نوع الكائنات التي سيتم إنشاؤها.

Example:
Consider a scenario where you have an application that can create different types of documents, such as text documents and spreadsheets. You can use the Factory Method pattern to define an interface for creating a document and let subclasses decide which type of document to create.

مثال:
فكر في سيناريو حيث يكون لديك تطبيق يمكنه إنشاء أنواع مختلفة من المستندات، مثل المستندات النصية وجداول البيانات. يمكنك استخدام نمط أسلوب المصنع لتحديد واجهة لإنشاء مستند والسماح للفئات الفرعية بتحديد نوع المستند الذي سيتم إنشاؤه.

        +----------------------+
        |     Application      |  (Abstract Class)
        +----------------------+
        | - createDocument()   |
        | + newDocument()      |
        +----------------------+
                   /\
                   |
    +--------------+--------------+
    |                             |
+-----------------------+      +--------------------------+
|  TextApplication      |      | SpreadsheetApplication   |
| (Concrete Class)      |      | (Concrete Class)         |
+-----------------------+      +--------------------------+
| + createDocument()    |      | + createDocument()       |
+-----------------------+      +--------------------------+
                   /\                  /\
                   |                    |
                   |                    |
+--------------+----------+ +-------+----------+
|                         | |                  |
+---------------------+ +----------------------+
|  TextDocument       | |  SpreadsheetDocument |
| (Concrete Class)    | | (Concrete Class)     |
+---------------------+ +----------------------+
| + open()            | | + open()             |
| + close()           | | + close()            |
| + save()            | | + save()             |
+---------------------+ +----------------------+
            /\                    /\
            |                      |
            +----------+-----------+
                       |
                   +-------------+
                   |  Document   |
                   | (Interface) |
                   +-------------+
                   | + open()    |
                   | + close()   |
                   | + save()    |
                   +-------------+


3 - Abstract Factory methods

Abstract Factory is a creational design pattern, which solves the problem of creating
 entire product families without specifying their concrete classes
Abstract Factory هو نمط تصميم إبداعي يحل مشكلة إنشاء مجموعات منتجات كاملة
 دون تحديد فئاتها المحددة


 مثال:
لنفترض أن لدينا واجهة رسومية تدعم عناصر واجهة مستخدم (UI Elements) مختلفة مثل الأزرار والنوافذ، 
ويمكن أن تكون هذه العناصر خاصة بنظام تشغيل معين (Windows، MacOS، إلخ).

          +----------------------+
          |     GUIFactory       |<<interface>>
          +----------------------+
          | + createButton(): Button |
          | + createWindow(): Window |
          +----------------------+
                    ^
                    |
    +---------------+---------------+
    |                               |
+----------------+         +-----------------+
| WindowsFactory |         |  MacOSFactory   |
+----------------+         +-----------------+
| + createButton()         | + createButton() |
| + createWindow()         | + createWindow() |
+----------------+         +-----------------+
                    ^
                    |
  +-----------------+------------------+
  |                                  |
+------------+              +-------------+
|  Button    |<<interface>> |  Window     |<<interface>>
+------------+              +-------------+
| + click()  |              | + open()    |
+------------+              +-------------+
       ^                           ^
       |                           |
+-----------------+     +------------------+
| WindowsButton   |     | WindowsWindow    |
+-----------------+     +------------------+
| + click()       |     | + open()         |
+-----------------+     +------------------+
       ^                           ^
       |                           |
+-----------------+     +------------------+
| MacOSButton     |     | MacOSWindow      |
+-----------------+     +------------------+
| + click()       |     | + open()         |
+-----------------+     +------------------+

