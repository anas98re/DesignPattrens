1 - Builder :

The Builder Design Pattern is used when you need to construct a complex object,
which requires multiple steps and configurations. This pattern separates the 
construction process from the final representation, allowing the same construction
process to create different representations.


يتم استخدام نمط تصميم المنشئ عندما تحتاج إلى إنشاء كائن معقد،
الأمر الذي يتطلب خطوات وتكوينات متعددة. هذا النمط يفصل بين
عملية البناء من التمثيل النهائي، مما يسمح بنفس البناء
عملية لإنشاء تمثيلات مختلفة.


Example 1:
Lets assume we want to build a complex object like a car,
which has various components such as the engine, wheels, 
and body. We should be able to configure the car in different 
ways (e.g., sports car, economy car).

لنفترض أننا نريد بناء جسم معقد مثل السيارة،
والتي تحتوي على مكونات مختلفة مثل المحرك، والعجلات،
والجسم. يجب أن نكون قادرين على تكوين السيارة بشكل مختلف
طرق (على سبيل المثال، سيارة رياضية، سيارة اقتصادية).

Example 2:
Suppose we want to create a House object that contains several components such as walls, doors, windows, roof, and garage. Each home can have different specifications for these components.

افترض أننا نريد إنشاء كائن House يحتوي على عدة مكونات مثل walls, doors, windows, roof, و garage. يمكن أن يكون لكل منزل مواصفات مختلفة لهذه المكونات.

+-----------------+        +----------------+
|     Director    |        |   CarBuilder   |Interface
+-----------------+        +----------------+
| - builder       |<>------| + buildEngine()|
+-----------------+        | + buildWheels()|
                           | + buildBody()  |
                           | + getCar()     |
                           +----------------+
                                   /_\
                                    |
                                    |
                                    |
                +-------------------+-------------------+
                |                                       |
                |                                       |
                |                                       |
+--------------------------+        +--------------------------+
|     SportsCarBuilder     |        |    EconomyCarBuilder     |
+--------------------------+        +--------------------------+
| - car: Car               |        | - car: Car               |
+--------------------------+        +--------------------------+
| + buildEngine()          |        | + buildEngine()          |
| + buildWheels()          |        | + buildWheels()          |
| + buildBody()            |        | + buildBody()            |
| + getCar()               |        | + getCar()               |
+--------------------------+        +--------------------------+
          |                                    |
          |                                    |
          V                                    V 
+----------------+                       +----------------+
|      Car 1     |                       |    car 2       |
+----------------+                       +----------------+
| - engine       |                       |                |
| - wheels       |                       |                |
| - body         |                       |                |
| + setEngine()  |                       |                |
| + setWheels()  |                       |                |
| + setBody()    |                       |                |
| + toString()   |                       |                |
+----------------+                       +----------------+


2 - Factory method

Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.
أسلوب المصنع هو نمط تصميم إبداعي يوفر واجهة لإنشاء كائنات في فئة فائقة، ولكنه يسمح للفئات الفرعية بتغيير نوع الكائنات التي سيتم إنشاؤها.

Example:
Consider a scenario where you have an application that can create different types of documents, such as text documents and spreadsheets. You can use the Factory Method pattern to define an interface for creating a document and let subclasses decide which type of document to create.

مثال:
فكر في سيناريو حيث يكون لديك تطبيق يمكنه إنشاء أنواع مختلفة من المستندات، مثل المستندات النصية وجداول البيانات. يمكنك استخدام نمط أسلوب المصنع لتحديد واجهة لإنشاء مستند والسماح للفئات الفرعية بتحديد نوع المستند الذي سيتم إنشاؤه.

        +----------------------+
        |     Application      |  (Abstract Class)
        +----------------------+
        | - createDocument()   |
        | + newDocument()      |
        +----------------------+
                   /\
                   |
    +--------------+--------------+
    |                             |
+-----------------------+      +--------------------------+
|  TextApplication      |      | SpreadsheetApplication   |
| (Concrete Class)      |      | (Concrete Class)         |
+-----------------------+      +--------------------------+
| + createDocument()    |      | + createDocument()       |
+-----------------------+      +--------------------------+
                   /\                  /\
                   |                    |
                   |                    |
+--------------+----------+ +-------+----------+
|                         | |                  |
+---------------------+ +----------------------+
|  TextDocument       | |  SpreadsheetDocument |
| (Concrete Class)    | | (Concrete Class)     |
+---------------------+ +----------------------+
| + open()            | | + open()             |
| + close()           | | + close()            |
| + save()            | | + save()             |
+---------------------+ +----------------------+
            /\                    /\
            |                      |
            +----------+-----------+
                       |
                   +-------------+
                   |  Document   |
                   | (Interface) |
                   +-------------+
                   | + open()    |
                   | + close()   |
                   | + save()    |
                   +-------------+


3 - Abstract Factory methods

Abstract Factory is a creational design pattern, which solves the problem of creating
 entire product families without specifying their concrete classes
Abstract Factory هو نمط تصميم إبداعي يحل مشكلة إنشاء مجموعات منتجات كاملة
 دون تحديد فئاتها المحددة


 مثال:
لنفترض أن لدينا واجهة رسومية تدعم عناصر واجهة مستخدم (UI Elements) مختلفة مثل الأزرار والنوافذ، 
ويمكن أن تكون هذه العناصر خاصة بنظام تشغيل معين (Windows، MacOS، إلخ).

          +----------------------+
          |     GUIFactory       |<<interface>>
          +----------------------+
          | + createButton(): Button |
          | + createWindow(): Window |
          +----------------------+
                    ^
                    |
    +---------------+---------------+
    |                               |
+----------------+         +-----------------+
| WindowsFactory |         |  MacOSFactory   |
+----------------+         +-----------------+
| + createButton()         | + createButton() |
| + createWindow()         | + createWindow() |
+----------------+         +-----------------+
                    ^
                    |
  +-----------------+------------------+
  |                                  |
+------------+              +-------------+
|  Button    |<<interface>> |  Window     |<<interface>>
+------------+              +-------------+
| + click()  |              | + open()    |
+------------+              +-------------+
       ^                           ^
       |                           |
+-----------------+     +------------------+
| WindowsButton   |     | WindowsWindow    |
+-----------------+     +------------------+
| + click()       |     | + open()         |
+-----------------+     +------------------+
       ^                           ^
       |                           |
+-----------------+     +------------------+
| MacOSButton     |     | MacOSWindow      |
+-----------------+     +------------------+
| + click()       |     | + open()         |
+-----------------+     +------------------+


* تلخيص عن الفرق بين factory methode & Abstract Factory وكيف نختار بينهما

- Factory Method هو نمط تصميم يحدد واجهة لإنشاء كائن، ولكنه يترك للفئات الفرعية
تحديد الفئة التي سيتم إنشاء كائن منها. يتيح هذا 
النمط للفئة تأجيل إنشاء كائنات إلى الفئات الفرعية.

تنفيذ: يتم استخدامه عندما يكون لديك فئة أساسية ومجموعة من الفئات الفرعية
وتحتاج إلى إنشاء كائنات من هذه الفئات الفرعية.

- Abstract Factory هو نمط تصميم يوفر واجهة لإنشاء عائلات من 
الكائنات ذات الصلة أو التابعة دون تحديد فئاتها
الملموسة. يستخدم عندما يكون النظام بحاجة إلى
العمل مع عائلات متعددة من الكائنات المتعلقة ببعضها.

تنفيذ: يتم استخدامه عندما يكون لديك عائلات متعددة من الكائنات وتحتاج إلى ضمان
أن الكائنات في كل عائلة متوافقة مع بعضها البعض.

- كيف تختار بين Factory Method و Abstract Factory؟

عند اختيار Factory Method:
عند الحاجة إلى توفير واجهة لإنشاء كائن واحد، 
وتريد أن يحدد الفئات الفرعية كيفية إنشاء هذا الكائن.
عندما يكون لديك فئة أساسية وتحتاج إلى السماح
للفئات الفرعية بتحديد الفئة التي سيتم إنشاء كائن منها.
عندما تكون لديك فئة مجردة وتريد ترك التفاصيل للفئات الفرعية.

عند اختيار Abstract Factory:
عند الحاجة إلى توفير واجهة لإنشاء عائلات من الكائنات ذات الصلة.
عندما تحتاج إلى ضمان التوافق بين الكائنات التي تنتمي إلى نفس العائلة.
عندما يكون لديك مجموعة من الكائنات تحتاج إلى إنشائها معًا وتريد تبديل 
العائلات الكاملة من الكائنات بسهولة.

Examples:
سؤال:
لديك نظام يحتاج إلى إنشاء أزرار ونوافذ خاصة بأنظمة تشغيل مختلفة (Windows، MacOS). 
كل نظام تشغيل
لديه مجموعة من الأدوات التي تعمل معًا بشكل جيد. ما هو نمط التصميم الذي يجب استخدامه؟

إجابة:
يجب استخدام Abstract Factory لأنك تحتاج إلى إنشاء عائلات من الكائنات ذات الصلة 
(الأزرار والنوافذ) والتأكد من توافقها مع بعضها البعض في نفس العائلة 
(مثل أزرار ونوافذ Windows، وأزرار ونوافذ MacOS).

سؤال:
لديك فئة أساسية Document وتحتاج إلى توفير واجهة لإنشاء أنواع مختلفة من المستندات 
(TextDocument، SpreadsheetDocument) بشكل فردي. ما هو نمط التصميم الذي يجب استخدامه؟

إجابة:
يجب استخدام Factory Method لأنك تحتاج إلى توفير واجهة لإنشاء كائن واحد في كل مرة وتريد
أن تحدد الفئات الفرعية كيفية إنشاء هذا الكائن.



Prototype:

Prototype is a creational design pattern that allows cloning objects, even complex ones,
without coupling to their specific classes.

All prototype classes should have a common interface that makes it possible to copy objects
even if their concrete classes are unknown. Prototype objects can produce full copies since
objects of the same class can access each other’s private fields

النموذج الأولي هو نمط تصميم إبداعي يسمح باستنساخ الكائنات،
 حتى المعقدة منها، دون الاقتران بفئاتها المحددة.

يجب أن تحتوي جميع فئات النماذج الأولية على واجهة مشتركة تجعل من الممكن نسخ الكائنات
حتى لو كانت فئاتها المحددة غير معروفة. يمكن لكائنات
النموذج الأولي إنتاج نسخ كاملة نظرًا لأن الكائنات من نفس 
الفئة يمكنها الوصول إلى الحقول الخاصة لبعضها البعض

And:

-  يستخدم لإنشاء كائنات جديدة عن طريق نسخ (استنساخ) كائنات موجودة بدلاً 
من إنشاء كائنات جديدة من الصفر. يتيح هذا النمط إنشاء
 كائنات جديدة بكفاءة عندما يكون إنشاء كائن جديد معقدًا أو مكلفًا.

الفكرة الرئيسية:
بدلاً من إنشاء كائنات جديدة من الصفر باستخدام بناء مُنشئ (constructor)،
 يمكننا إنشاء كائنات جديدة عن طريق نسخ كائنات موجودة (prototypes).

+----------------+           +------------------+
|   Prototype    |           | ConcretePrototype|
| <<interface>>  |<--------- |    Circle        |
| + clone()      |           +------------------+
+----------------+           | - radius: int    |
                             | + clone(): Circle|
                             +------------------+
                             |                  |
                             |   Rectangle      |
                             | - width: int     |
                             | - height: int    |
                             | + clone():       |
                             +------------------+
