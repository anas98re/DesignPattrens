Abstract Factory is a creational design pattern, which solves the problem of creating
entire product families without specifying their concrete classes.

Abstract Factory defines an interface for creating all distinct products
but leaves the actual product creation to concrete factory classes. Each 
factory type corresponds to a certain product variety.

The client code calls the creation methods of a factory 
object instead of creating
products directly with a constructor call (new operator).
Since a factory corresponds to a single product variant, 
all its products will be compatible.

Client code works with factories and products only through
their abstract interfaces. This lets the client code work
with any product variants, created by the factory object.
You just create a new concrete factory class and pass it to the client code.

Abstract Factory هو نمط تصميم إبداعي
يحل مشكلة إنشاء مجموعات منتجات كاملة دون تحديد فئاتها المحددة.

يحدد Abstract Factory واجهة لإنشاء جميع المنتجات المتميزة
ولكنه يترك إنشاء المنتج الفعلي لفئات المصنع المحددة.
يتوافق كل نوع مصنع مع مجموعة متنوعة من المنتجات.

يستدعي رمز العميل أساليب إنشاء كائن المصنع بدلاً 
من إنشاء المنتجات مباشرةً باستخدام استدعاء المنشئ (عامل التشغيل الجديد). 
وبما أن المصنع يتوافق مع متغير منتج واحد، فإن جميع منتجاته ستكون متوافقة.

يعمل رمز العميل مع المصانع والمنتجات فقط من خلال واجهاتها المجردة. يتيح ذلك لكود
العميل العمل مع أي متغيرات منتج تم إنشاؤها بواسطة كائن المصنع.
ما عليك سوى إنشاء فئة مصنع خرسانية جديدة وتمريرها إلى رمز العميل.