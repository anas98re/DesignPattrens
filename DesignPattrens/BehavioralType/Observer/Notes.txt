Observer (Also known as : Event-Subscriber, Listener)

Observer is a behavioral design pattern that lets you define a subscription 
mechanism to notify multiple objects about any events that happen to the 
object they’re observing.
المراقب هو نمط تصميم سلوكي يتيح لك تحديد 
آلية اشتراك لإخطار كائنات متعددة بأي أحداث تحدث للكائن الذي يراقبونه.

The Observer design pattern is a behavioral pattern used to create a one-to-many dependency 
relationship between multiple objects, so that all Observers are notified when the state of 
the Observed object changes. This pattern is used when there are objects that depend on the 
state of another object and want to be notified of changes to that state.
نمط التصميم Observer هو نمط سلوكي يُستخدم لإنشاء علاقة تبعية واحد إلى
متعدد بين كائنات متعددة، بحيث يتم إعلام كل الكائنات التابعة (Observers) عند تغيير حالة الكائن
المرصود (Subject). يتم استخدام هذا النمط عندما يكون هناك كائنات
تعتمد على حالة كائن آخر ويرغب في إعلامها بتغييرات هذه الحالة.

n the other hand, the store could send tons of emails (which might be considered spam) to 
all customers each time a new product becomes available. This would save some customers from 
endless trips to the store. At the same time, it’d upset other customers who aren’t interested 
in new products.

It looks like we’ve got a conflict. Either the customer wastes time checking product 
availability or the store wastes resources notifying the wrong customers.   
ومن ناحية أخرى، يمكن للمتجر إرسال عدد كبير من رسائل البريد 
الإلكتروني (والتي قد تعتبر رسائل غير مرغوب فيها) إلى جميع العملاء في كل مرة 
يتوفر فيها منتج جديد. وهذا من شأنه أن ينقذ بعض العملاء من الرحلات التي لا نهاية
 لها إلى المتجر. وفي الوقت نفسه، قد يزعج ذلك العملاء الآخرين الذين لا يهتمون بالمنتجات الجديدة.

يبدو أن لدينا صراع. إما أن يضيع العميل 
الوقت في التحقق من توفر المنتج أو أن المتجر يهدر الموارد لإخطار العملاء الخطأ.

Solution
The object that has some interesting state is often called subject, but since it’s also 
going to notify other objects about the changes to its state, we’ll call it publisher. 
All other objects that want to track changes to the publisher’s state are called subscribers.

The Observer pattern suggests that you add a subscription mechanism to the publisher class 
so individual objects can subscribe to or unsubscribe from a stream of events coming from 
that publisher. Fear not! Everything isn’t as complicated as it sounds. In reality, this 
mechanism consists of 1) an array field for storing a list of references to subscriber 
objects and 2) several public methods which allow adding subscribers to and removing them 
from that list.
حل
غالبًا ما يسمى الكائن الذي يتمتع بحالة مثيرة
 للاهتمام بالموضوع، ولكن بما أنه سيُعلم الكائنات الأخرى أيضًا بالتغييرات التي تطرأ 
على حالته، فسنسميه الناشر. 
تُسمى جميع الكائنات الأخرى التي ترغب في تتبع التغييرات في حالة الناشر بالمشتركين.

يقترح نمط المراقب إضافة آلية ا
شتراك إلى فئة الناشر حتى تتمكن الكائنات الفردية من الاشتراك أو إلغاء الاشتراك 
في دفق الأحداث القادمة من هذا 
الناشر. لا تخافوا! كل شيء ليس معقدًا كما يبدو. في الواقع، تتكون هذه الآلية من 1) حقل مصفوفة 
لتخزين قائمة المراجع لكائنات المشترك و2) عدة طرق عامة تسمح بإضافة 
المشتركين إلى تلك القائمة وإزالتهم منها.


Now, whenever an important event happens to the publisher, it goes over its subscribers and 
calls the specific notification method on their objects.

Real apps might have dozens of different subscriber classes that are interested in tracking 
events of the same publisher class. You wouldn’t want to couple the publisher to all of those 
classes. Besides, you might not even know about some of them beforehand if your publisher class 
is supposed to be used by other people.

That’s why it’s crucial that all subscribers implement the same interface and that the publisher 
communicates with them only via that interface. This interface should declare the notification 
method along with a set of parameters that the publisher can use to pass some contextual data 
along with the notification.
الآن، عندما يحدث حدث مهم للناشر، فإنه يتخطى المشتركين ويستدعي طريقة الإشعارات المحددة على كائناتهم.

قد تحتوي التطبيقات الحقيقية على العشرات من فئات المشتركين المختلفة 
المهتمة بتتبع الأحداث من نفس فئة الناشر. لن ترغب في ربط الناشر بكل هذه 
الفئات. بالإضافة إلى ذلك، قد لا تعرف حتى عن بعضها مسبقًا 
إذا كان من المفترض أن يتم استخدام فئة الناشر الخاصة بك من قبل أشخاص آخرين.

ولهذا السبب من المهم أن يقوم جميع المشتركين بتطبيق نفس الواجهة وأن يتواصل 
الناشر معهم عبر تلك الواجهة فقط. يجب أن تعلن هذه الواجهة عن طريقة الإشعار 
مع مجموعة من المعلمات التي يمكن للناشر استخدامها لتمرير بعض البيانات السياقية مع الإشعار.

If your app has several different types of publishers and you want to make your subscribers 
compatible with all of them, you can go even further and make all publishers follow the same 
interface. This interface would only need to describe a few subscription methods. The interface 
would allow subscribers to observe publishers’ states without coupling to their concrete classes.
إذا كان تطبيقك يحتوي على عدة أنواع مختلفة من الناشرين وترغب في جعل 
المشتركين لديك متوافقين معهم جميعًا، فيمكنك الذهاب إلى أبعد من 
ذلك وجعل جميع الناشرين يتبعون نفس الواجهة. ستحتاج هذه الواجهة فقط إلى 
وصف بعض طرق الاشتراك. ستسمح الواجهة للمشتركين بمراقبة حالات الناشرين دون الارتباط بفئاتهم المحددة.

Ex:
If you subscribe to a newspaper or magazine, you no longer need to go to the store to check if the 
next issue is available. Instead, the publisher sends new issues directly to your mailbox right 
after publication or even in advance.

The publisher maintains a list of subscribers and knows which magazines they’re interested in. 
Subscribers can leave the list at any time when they wish to stop the publisher sending new magazine 
issues to them.
إذا قمت بالاشتراك في صحيفة أو مجلة، فلن تحتاج بعد الآن إلى الذهاب 
إلى المتجر للتحقق من توفر العدد التالي. وبدلاً من ذلك، 
يرسل الناشر الإصدارات الجديدة مباشرة إلى صندوق البريد الخاص بك مباشرة بعد النشر أو حتى مقدمًا.

يحتفظ الناشر بقائمة المشتركين ويعرف المجلات التي يهتمون بها. 
ويمكن للمشتركين مغادرة القائمة في أي وقت عندما يرغبون في منع الناشر من إرسال أعداد جديدة من المجلات إليهم.

