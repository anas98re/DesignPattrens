Important Steps:
- Visitor Interface (we put inside it accept methode)
- implementation classes(we put inside them the implementation for accept methode
and some getting methods)
- implementations for every single class in Concrete Visitor class that also implement 
visitor

- First Expline

The Visitor design pattern is a behavioral pattern that is used to add new operations 
to objects in an object-oriented structure without changing the objects themselves. 
This pattern separates the objects that contain data and the operations that can be 
performed on that data. The main benefit of this pattern is the ability to add new 
operations without modifying existing code.

Style components
Visitor:

An abstract interface or class that contains visit methods for each object type that 
can be visited.
ConcreteVisitor (actual visitor):

It implements the visitor interface and performs specified operations on the 
objects it visits.
Element:

An abstract interface or class containing an accept function that accepts 
a visitor of type Visitor.
ConcreteElement (actual element):

It implements the element's interface and implements an accept function that 
calls the appropriate visit function in visitor.
The way of work
Definition of items and visitors:

Design begins by defining the objects that need to be visited (elements) and 
defining the visitors who perform the operations.
Accept function implementation:

On each element, an accept function is implemented that takes visitor as a 
parameter and calls the appropriate visit function on visitor.
Implementation of the visit function:

In Visitor, the visit function is implemented that specifies the operation to 
be performed on the object.
نمط التصميم "Visitor" هو نمط سلوكي يُستخدم لإضافة عمليات جديدة إلى الكائنات في بنية كائنية دون تغيير 
الكائنات نفسها. هذا النمط يفصل بين الكائنات التي تحتوي البيانات والعمليات 
التي يمكن تنفيذها على هذه البيانات. الفائدة 
الرئيسية من هذا النمط هي القدرة على إضافة عمليات جديدة دون تعديل الكود الحالي.

مكونات النمط
Visitor (الزائر):

واجهة أو كلاس مجرد يحتوي على دوال visit لكل نوع كائن يمكن زيارته.
ConcreteVisitor (الزائر الفعلي):

يحقق واجهة الزائر ويُنفذ العمليات المحددة على الكائنات التي يزورها.
Element (العنصر):

واجهة أو كلاس مجرد يحتوي على دالة accept التي تقبل زائرًا من نوع Visitor.
ConcreteElement (العنصر الفعلي):

يحقق واجهة العنصر ويُنفذ دالة accept التي تستدعي دالة visit المناسبة في الزائر.
كيفية العمل
تعريف العناصر والزوار:

يبدأ التصميم بتعريف 
الكائنات التي تحتاج إلى زيارة (العناصر) وتعريف الزوار الذين ينفذون العمليات.
تنفيذ دالة accept:

في كل عنصر، يتم تنفيذ دالة accept التي تأخذ زائرًا كمعامل وتستدعي دالة 
visit المناسبة في الزائر.
تنفيذ دالة visit:

في الزائر، يتم تنفيذ دالة visit التي تحدد العملية التي يجب تنفيذها على الكائن.



#
- Another Expline

Visitor is a behavioral design pattern that lets you separate algorithms 
from the objects on which they operate.
الزائر هو نمط تصميم سلوكي يتيح لك فصل الخوارزميات عن الكائنات التي تعمل عليها.

Problem
Imagine that your team develops an app which works with geographic information 
structured as one colossal graph. Each node of the graph may represent a 
complex entity such as a city, but also more granular things like industries, 
sightseeing areas, etc. The nodes are connected with others if there’s a road between 
the real objects that they represent. Under the hood, each node type is represented by 
its own class, while each specific node is an object.
مشكلة
تخيل أن فريقك يقوم بتطوير تطبيق يعمل مع المعلومات الجغرافية المنظمة في شكل 
رسم بياني ضخم. قد تمثل كل عقدة في الرسم البياني كيانًا معقدًا مثل مدينة، 
ولكنها تمثل أيضًا أشياء أكثر تفصيلاً مثل الصناعات ومناطق مشاهدة المعالم 
السياحية وما إلى ذلك. وترتبط العقد بالعقد الأخرى إذا كان هناك طريق بين 
الأشياء الحقيقية التي تمثلها. تحت الغطاء، 
يتم تمثيل كل نوع عقدة بفئتها الخاصة، في حين أن كل عقدة محددة هي كائن.

At some point, you got a task to implement exporting the graph into XML format. 
At first, the job seemed pretty straightforward. You planned to add an export 
method to each node class and then leverage recursion to go over each node of 
the graph, executing the export method. The solution was simple and elegant: 
thanks to polymorphism, you weren’t coupling the code which called the export 
method to concrete classes of nodes.

Unfortunately, the system architect refused to allow you to alter existing node 
classes. He said that the code was already in production and he didn’t want to 
risk breaking it because of a potential bug in your changes.
في مرحلة ما، حصلت على مهمة لتنفيذ تصدير الرسم البياني إلى تنسيق XML. في البداية، بدت المهمة 
واضحة جدًا. لقد خططت لإضافة طريقة تصدير إلى كل فئة عقدة ثم الاستفادة من التكرار 
لتجاوز كل عقدة في الرسم البياني، وتنفيذ طريقة التصدير. كان الحل بسيطًا
 وأنيقًا: بفضل تعدد الأشكال، لم تتمكن من 
 ربط الكود الذي يطلق على طريقة التصدير بفئات محددة من العقد.

لسوء الحظ، رفض مهندس النظام السماح لك بتغيير فئات 
العقد الموجودة. وقال إن الكود كان قيد الإنتاج بالفعل 
وأنه لا يريد المخاطرة بكسره بسبب خطأ محتمل في تغييراتك.

Besides, he questioned whether it makes sense to have the XML export code within 
the node classes. The primary job of these classes was to work with geodata. The 
XML export behavior would look alien there.

There was another reason for the refusal. It was highly likely that after this 
feature was implemented, someone from the marketing department would ask you to 
provide the ability to export into a different format, or request some other weird 
stuff. This would force you to change those precious and fragile classes again.
بالإضافة إلى ذلك، تساءل عما إذا كان من المنطقي وجود كود تصدير XML ضمن فئات العقدة. كانت المهمة 
الأساسية لهذه الفئات هي 
العمل مع البيانات الجغرافية. 
سيبدو سلوك تصدير XML غريبًا هناك.

وكان هناك سبب آخر للرفض. كان من المحتمل جدًا أنه بعد تنفيذ هذه الميزة، سيطلب منك
 أحد موظفي قسم التسويق توفير إمكانية التصدير إلى تنسيق مختلف، أو طلب بعض الأشياء 
الغريبة الأخرى. وهذا من شأنه أن يجبرك على تغيير تلك الطبقات الثمينة والهشة مرة أخرى.

 Solution
The Visitor pattern suggests that you place the new behavior into a separate class 
called visitor, instead of trying to integrate it into existing classes. The original 
object that had to perform the behavior is now passed to one of the visitor’s methods 
as an argument, providing the method access to all necessary data contained within the object.

Now, what if that behavior can be executed over objects of different classes? For 
example, in our case with XML export, the actual implementation will probably be a 
little bit different across various node classes. Thus, the visitor class may define 
not one, but a set of methods, each of which could take arguments of different types, 
like this:
حل
يقترح نمط الزائر أن تضع السلوك الجديد
 في فئة منفصلة تسمى الزائر، بدلاً من محاولة دمجه في الفئات 
 الموجودة. يتم الآن تمرير الكائن الأصلي الذي كان 
 عليه تنفيذ السلوك إلى أحد أساليب الزائر
  كوسيطة، مما يوفر وصول الأسلوب إلى جميع 
 البيانات الضرورية الموجودة داخل الكائن.

الآن، ماذا لو كان من الممكن تنفيذ هذا السلوك على كائنات
 من فئات مختلفة؟ على سبيل المثال، في حالتنا مع تصدير 
 XML، من المحتمل أن يكون التنفيذ الفعلي مختلفًا قليلاً عبر فئات 
 العقد
  المختلفة. وبالتالي،
  قد لا تحدد فئة الزائر طريقة واحدة، بل مجموعة من الأساليب،
  يمكن لكل منها أن تأخذ
  وسيطات من أنواع
  مختلفة، مثل هذا:

  class ExportVisitor implements Visitor is
    method doForCity(City c) { ... }
    method doForIndustry(Industry f) { ... }
    method doForSightSeeing(SightSeeing ss) { ... }
    // ...
